#
# https://github.com/dircmd/dircmd
#
DIRCMD_SHM="/dev/shm/dircmd-${USER}-$$"
if [[ -d ${DIRCMD_SHM} ]]; then
  rm -rf ${DIRCMD_SHM}
fi
mkdir -p ${DIRCMD_SHM}
chmod go=-rwx ${DIRCMD_SHM}
trap "$(trap -p 'EXIT' | cut -d "'" -f 2- \
  | awk -F "'" '{ if (NF >= 2) printf("%s; ",$(NF-1)); }')rm -rf ${DIRCMD_SHM}" EXIT
_dircmd_restore_stdin()
{
  exec 0<&6 6<&-
}
_dircmd_hook()
{
  local previous_exit_status=$?
  local DIRCMD_LAST DIRCMD_CURRENT
  DIRCMD_LAST="${OLDPWD}"
  DIRCMD_CURRENT="${PWD}"
  exec 6<&0
  _dircmd_run_exit()
  {
    if [[ -d "${DIRCMD_SHM}${PWD}" ]]; then
      for ES in $(ls .dircmd/*exit 2>/dev/null) ; do
        source ${ES} < /dev/null
      done
      if [[ "${PWD}" != "/" ]]; then
        rmdir "${DIRCMD_SHM}${PWD}"
      fi
    fi
  }
  _dircmd_exit()
  {
    cd "${DIRCMD_LAST}"
    _dircmd_run_exit
    while [[ "${PWD}" != "${1}" ]]; do
      if [[ "${PWD}" == "/" ]]; then
        break
      fi
      _dircmd_run_exit
      cd ..
    done
    cd "${DIRCMD_CURRENT}"
  }
  _dircmd_entry()
  {
    local DIRCMD_LIST
    while [[ "${PWD}" != "${1}" ]]; do
      if [[ -d .dircmd ]]; then
        DIRCMD_LIST[${#DIRCMD_LIST[@]}]="${PWD}"
      fi
      cd ..
    done
    if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
      DIRCMD_LIST[${#DIRCMD_LIST[@]}]="${PWD}"
    fi
    for (( i=0 ; i < ${#DIRCMD_LIST[@]}; i++ )); do
      cd "${DIRCMD_LIST[${i}]}"
      if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
        for ES in $(ls .dircmd/*entry 2>/dev/null) ; do
          source ${ES} < /dev/null
        done
        mkdir -p "${DIRCMD_SHM}${PWD}"
      fi
    done
    cd "${DIRCMD_CURRENT}"
  }
  _dircmd_compare()
  {
    local DIRCMD_DIR1 DIRCMD_DIR2
    DIRCMD_DIR1="${DIRCMD_LAST}"
    DIRCMD_DIR2="${DIRCMD_CURRENT}"
    while ! echo "${DIRCMD_DIR2}" | egrep -q "^${DIRCMD_DIR1}" ; do
      DIRCMD_DIR1="$(dirname ${DIRCMD_DIR1})"
      if [[ "${DIRCMD_DIR1}" == "/" ]]; then
        break
      fi
    done
    echo "${DIRCMD_DIR1}"
  }
  if [[ -d "${DIRCMD_LAST}" ]]; then
    if echo "${DIRCMD_LAST}" | egrep -q "^${DIRCMD_CURRENT}$" ;then
      # Staying in same directory.
      if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
        _dircmd_entry "$(_dircmd_compare)"
      fi
    else
      if echo "${DIRCMD_CURRENT}/" | egrep -q "^${DIRCMD_LAST}/" ;then
        # Moving into a sub directory.
        _dircmd_entry "${DIRCMD_LAST}"
      else
        # Going up to a parent directory or out the tree.
        _dircmd_exit "$(_dircmd_compare)"
        _dircmd_entry "${DIRCMD_CURRENT}"
      fi
    fi
  else
    if [[ "${PWD}" != "/" ]]; then
      if [[ -d "${DIRCMD_SHM}${PWD}" ]]; then
        rmdir "${DIRCMD_SHM}${PWD}"
      fi
    fi
  fi
  _dircmd_restore_stdin
  return $previous_exit_status
}
if ! [[ "${PROMPT_COMMAND}" =~ _dircmd_hook ]]; then
  PROMPT_COMMAND="type -t _dircmd_hook >/dev/null && _dircmd_hook;${PROMPT_COMMAND}"
  cd ~
fi

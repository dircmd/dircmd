#
# https://github.com/dircmd/dircmd
#
DIRCMD_SHM="/dev/shm/dircmd-${USER}-$$"
if [[ -d ${DIRCMD_SHM} ]]; then
  rm -rf ${DIRCMD_SHM}
fi
mkdir -p ${DIRCMD_SHM}
chmod go=-rwx ${DIRCMD_SHM}
trap "$(trap -p 'EXIT' | cut -d "'" -f 2- \
  | awk -F "'" '{ if (NF >= 2) printf("%s; ",$(NF-1)); }')rm -rf ${DIRCMD_SHM}" EXIT
_dircmd_hook()
{
  local previous_exit_status=$?
  local LAST CURRENT
  LAST="${OLDPWD}"
  CURRENT="${PWD}"
  _dircmd_run_exit()
  {
    if [[ -d "${DIRCMD_SHM}${PWD}" ]]; then
      if [[ -e .dircmd/exit ]]; then
        source .dircmd/exit
      fi
      rmdir "${DIRCMD_SHM}${PWD}"
    fi
  }
  _dircmd_exit()
  {
    cd "${LAST}"
    _dircmd_run_exit
    while [[ "${PWD}" != "${1}" ]]; do
      if [[ "${PWD}" == "/" ]]; then
        break
      fi
      _dircmd_run_exit
      cd ..
    done
    cd "${CURRENT}"
  }
  _dircmd_entry()
  {
    local LIST
    while [[ "${PWD}" != "${1}" ]]; do
      if [[ -d .dircmd ]]; then
        LIST[${#LIST[@]}]="${PWD}"
      fi
      cd ..
    done
    if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
      LIST[${#LIST[@]}]="${PWD}"
    fi
    for (( i=0 ; i < ${#LIST[@]}; i++ )); do
      cd "${LIST[${i}]}"
      if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
        if [[ -e .dircmd/entry ]]; then
          source .dircmd/entry
        fi
        mkdir -p "${DIRCMD_SHM}${PWD}"
      fi
    done
    cd "${CURRENT}"
  }
  _dircmd_compare()
  {
    local DIR1 DIR2
    DIR1="${LAST}"
    DIR2="${CURRENT}"
    while ! echo "${DIR2}" | egrep -q "^${DIR1}" ; do
      DIR1="$(dirname ${DIR1})"
      if [[ "${DIR1}" == "/" ]]; then
        break
      fi
    done
    echo "${DIR1}"
  }
  if [[ -d "${LAST}" ]]; then
    if echo "${LAST}" | egrep -q "^${CURRENT}$" ;then
      # Staying in same directory.
      if [[ ! -d "${DIRCMD_SHM}${PWD}" ]]; then
        _dircmd_entry "$(_dircmd_compare)"
      fi
    else
      if echo "${CURRENT}/" | egrep -q "^${LAST}/" ;then
        # Moving into a sub directory.
        _dircmd_entry "${LAST}"
      else
        # Going up to a parent directory or out the tree.
        _dircmd_exit "$(_dircmd_compare)"
        _dircmd_entry "${CURRENT}"
      fi
    fi
  else
    if [[ -d "${DIRCMD_SHM}${PWD}" ]]; then
      rmdir "${DIRCMD_SHM}${PWD}"
    fi
  fi
  return $previous_exit_status
}
if ! [[ "${PROMPT_COMMAND}" =~ _dircmd_hook ]]; then
  PROMPT_COMMAND="_dircmd_hook;${PROMPT_COMMAND}"
fi
